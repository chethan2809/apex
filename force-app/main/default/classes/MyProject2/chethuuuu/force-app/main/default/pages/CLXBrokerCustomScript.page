<apex:page >
<style>
[text-anchor="middle"]{
    font-size:0.7rem !important;
}

div#layout {
  text-align: center;
}

div#container {
  width: 60rem;
    height: 50rem;
  margin: auto;
  background-color: #fff;
}
#container svg{
  position: relative;
    left: -2.5rem;
    }

svg {
  width: 100%;
  height: 100%;
}

text {
  font-size: 15px;
  fill: #000;
}

path {
  stroke: gray;
}

line {
  stroke: gray;
}

line#limit {
  stroke: #FED966;
  stroke-width: 3;
  stroke-dasharray: 3 6;
}

.grid path {
  stroke-width: 0;
}

.grid .tick line {
  stroke: #9FAAAE;
  stroke-opacity: 0.3;
}

text.divergence {
  font-size: 12px;
  fill: #2F4A6D;
}

text.value {
  font-size: 18px !important;
}

text.title {
  font-size: 22px;
  font-weight: 600;
}

text.label {
  font-size: 12px;
  font-weight: 400;
}

text.source {
  font-size: 10px;
}
</style>
  <script src="https://d3js.org/d3.v5.min.js"></script>
    <script src="https://www.gstatic.com/charts/loader.js"></script>
    <script>
      google.charts.load('current', {
            'packages': ['bar']
        });
       google.charts.setOnLoadCallback(drawChart);</script>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
    <script type="text/javascript">
     /**************************************
    //BINDING THE EVENT 
    **************************************/
    function bindEvent(element, eventName, eventHandler) {
      if (element.addEventListener) {
        element.addEventListener(eventName, eventHandler, false);
      } else if (element.attachEvent) {
        element.attachEvent('on' + eventName, eventHandler);
      }
    }
    /**************************************
    //LISTEN TO MESSAGE FROM CHIELD WINDOW.
    **************************************/
    bindEvent(window, 'message', function (event) {
      //Web message catch.
        
       if(event.data == "initBrokerPieChart"){
      console.log('In Pie Chart');
        getDataForChart();
        drawChart();
      }
      
      function drawChart() {

        var data = new google.visualization.arrayToDataTable([
          ['Loan Product', 'Applications', { role: 'style' }, { role: 'annotation' }],
          ['Full Doc',  5, 'color: black', 'FD'],
          ['Alt Doc', 8, 'color: brown', 'AD'],
          ['Lite Doc',  5, 'color: red','LD'],
          ['SMSF', 3, 'color: green','SMSF'],
          ['Equ Fin', 2, 'color: purple','EF']
        ]);

        var options = {

                title: 'Loan Product Dashboard',
                width: 450,
                legend: {
                    position: 'none'
                },
            
                //animation.duration: 300,
                chart: {
                    title: 'Loan Product Dashboard'
                },
                axes: {
                    x: {
                        0: {
                            side: 'top',
                            label: 'Applicaions'
                        }
                    }
                },
                bars: 'horizontal',
            colors: ['#005378'],
            
            bar: { groupWidth: "90%" }
            };

        var chart = new google.charts.Bar(document.getElementById('piechart'));
            chart.draw(data, options);
      }
        
      function getDataForChart() {
      console.log('In function');
       const svg = d3.select('svg');
      const svgContainer = d3.select('#container');
          let color = [ "#14b469", "#F7A839", "#de5637", "#005378"];

        const sample = [
      {
        language: 'Approved',
        value: 76,
        color: '#000000',
      },
      {
        language: 'MoreInfo Needed',
        value: 16,
        color: '#000000',
      },
      {
        language: 'Rejected',
        value: 4,
        color: '#000000'
      },
      {
        language: 'New - Entered',
        value: 9,
        color: '#000000'
      }
    ];
    
    const margin = 70;
    const width = 700 - 2 * margin;
    const height = 500 - 2 * margin;

    const chart = svg.append('g')
      .attr('transform', `translate(${margin}, ${margin})`);

    const xScale = d3.scaleBand()
      .range([0, width])
      .domain(sample.map((s) => s.language))
      .padding(0.3)
    
    const yScale = d3.scaleLinear()
      .range([height, 0])
      .domain([0, 100]);

    // vertical grid lines
    // const makeXLines = () => d3.axisBottom()
    //   .scale(xScale)

    const makeYLines = () => d3.axisLeft()
      .scale(yScale)

    chart.append('g')
      .attr('transform', `translate(0, ${height})`)
      .call(d3.axisBottom(xScale));

    chart.append('g')
      .call(d3.axisLeft(yScale));

    // vertical grid lines
    // chart.append('g')
    //   .attr('class', 'grid')
    //   .attr('transform', `translate(0, ${height})`)
    //   .call(makeXLines()
    //     .tickSize(-height, 0, 0)
    //     .tickFormat('')
    //   )

    chart.append('g')
      .attr('class', 'grid')
      .call(makeYLines()
        .tickSize(-width, 0, 0)
        .tickFormat('')
      )

    const barGroups = chart.selectAll()
      .data(sample)
      .enter()
      .append('g')

    barGroups
      .append('rect')
      .attr('class', 'bar')
    
      .attr("fill", function(d, i) {
        return color[i%4];
       })
      .attr('x', (g) => xScale(g.language))
      .attr('y', (g) => yScale(g.value))
      .attr('height', (g) => height - yScale(g.value))
      .attr('width', xScale.bandwidth())
      .on('mouseenter', function (actual, i) {
        d3.selectAll('.value')
          .attr('opacity', 0)

        d3.select(this)
          .transition()
          .duration(300)
          .attr('opacity', 0.6)
          .attr('x', (a) => xScale(a.language) - 5)
          .attr('width', xScale.bandwidth() + 10)

        const y = yScale(actual.value)

        line = chart.append('line')
          .attr('id', 'limit')
          .attr('x1', 0)
          .attr('y1', y)
          .attr('x2', width)
          .attr('y2', y)

        barGroups.append('text')
          .attr('class', 'divergence')
          .attr('x', (a) => xScale(a.language) + xScale.bandwidth() / 2)
          .attr('y', (a) => yScale(a.value) - 10)
          .attr('fill', 'white')
          .attr('text-anchor', 'middle')
          .text((a, idx) => {
            const divergence = (a.value - actual.value).toFixed(1)
            
            let text = ''
            if (divergence > 0) text += '+'
            text += `${divergence}%`

            return idx !== i ? text : '';
          })

      })
      .on('mouseleave', function () {
        d3.selectAll('.value')
          .attr('opacity', 1)

        d3.select(this)
          .transition()
          .duration(300)
          .attr('opacity', 1)
          .attr('x', (a) => xScale(a.language))
          .attr('width', xScale.bandwidth())

        chart.selectAll('#limit').remove()
        chart.selectAll('.divergence').remove()
      })

    barGroups 
      .append('text')
      .attr('class', 'value')
      .attr('x', (a) => xScale(a.language) + xScale.bandwidth() / 2)
      .attr('y', (a) => yScale(a.value) - 10)
      .attr('text-anchor', 'middle')
      .text((a) => `${a.value}%`)
    
        }
    });
    

    </script>
</apex:page>